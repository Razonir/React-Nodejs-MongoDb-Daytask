{"ast":null,"code":"var _s = $RefreshSig$();\nimport { baseUrl } from './url';\nimport { useFetchWrapper } from \"../util/fetch-wrapper\";\nexport function TaskService() {\n  _s();\n  const fetchWarpper = useFetchWrapper();\n  const url = baseUrl + \"/task/\";\n  return {\n    getAll\n  };\n  function getAll() {\n    return fetchWarpper.get(url + 'all/');\n  }\n}\n// export async function getUserByJWT() {\n//     let d;\n//     let token = localStorage.getItem('token');\n//     const myHeaders = new Headers();\n//     myHeaders.append('Content-Type', 'application/json');\n//     myHeaders.append('Authorization', token);\n\n//     try {\n//         await fetch(baseUrl+\"/task/user\", {\n//             method: \"GET\",\n//             headers: myHeaders\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 d = data;\n//             });\n//         return d;\n//     } catch (err) {\n//         return []\n//     }\n// }\n\n// export async function getUserDoneByJWT() {\n//     let d;\n//     let token = localStorage.getItem('token');\n//     const myHeaders = new Headers();\n//     myHeaders.append('Content-Type', 'application/json');\n//     myHeaders.append('Authorization', token);\n\n//     try {\n//         await fetch(baseUrl+\"/task/userdone\", {\n//             method: \"GET\",\n//             headers: myHeaders\n//         })\n//             .then((response) => response.json())\n//             .then((data) => {\n//                 d = data;\n//             });\n//         return d;\n//     } catch (err) {\n//         return []\n//     }\n// }\n\n// export async function remove(id) {\n//     try {\n//         let token = localStorage.getItem('token');\n//         const myHeaders = new Headers();\n//         myHeaders.append('Content-Type', 'application/json');\n//         myHeaders.append('Authorization', token);\n//         let res = await fetch(baseUrl + \"/task/remove\", {\n//             method: \"POST\",\n//             headers: myHeaders,\n//             body: JSON.stringify({\n//                 _id: id,\n//             }),\n//         });\n//         console.log(res)\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n\n// export async function done(id) {\n//     try {\n//         let token = localStorage.getItem('token');\n//         const myHeaders = new Headers();\n//         myHeaders.append('Content-Type', 'application/json');\n//         myHeaders.append('Authorization', token);\n//         let res = await fetch(baseUrl+\"/task/done\", {\n//             method: \"POST\",\n//             headers: myHeaders,\n//             body: JSON.stringify({\n//                 _id: id,\n//             }),\n//         });\n//         console.log(res)\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n_s(TaskService, \"zEg7Hla+mmjQgYyTqucUmSCynXg=\", false, function () {\n  return [useFetchWrapper];\n});\n_c = TaskService;\nvar _c;\n$RefreshReg$(_c, \"TaskService\");","map":{"version":3,"names":["baseUrl","useFetchWrapper","TaskService","fetchWarpper","url","getAll","get"],"sources":["C:/Users/razoi/Desktop/full-stack/React-Nodejs-MongoDb-Daytask/frontend/src/services/TaskService.js"],"sourcesContent":["import { baseUrl } from './url'\r\nimport { useFetchWrapper } from \"../util/fetch-wrapper\";\r\n\r\nexport function TaskService() {\r\n    const fetchWarpper = useFetchWrapper();\r\n    const url = baseUrl +\"/task/\"\r\n    return{\r\n        getAll\r\n    }\r\n    function getAll() {\r\n        return fetchWarpper.get(url + 'all/');\r\n    }\r\n}\r\n// export async function getUserByJWT() {\r\n//     let d;\r\n//     let token = localStorage.getItem('token');\r\n//     const myHeaders = new Headers();\r\n//     myHeaders.append('Content-Type', 'application/json');\r\n//     myHeaders.append('Authorization', token);\r\n\r\n//     try {\r\n//         await fetch(baseUrl+\"/task/user\", {\r\n//             method: \"GET\",\r\n//             headers: myHeaders\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 d = data;\r\n//             });\r\n//         return d;\r\n//     } catch (err) {\r\n//         return []\r\n//     }\r\n// }\r\n\r\n// export async function getUserDoneByJWT() {\r\n//     let d;\r\n//     let token = localStorage.getItem('token');\r\n//     const myHeaders = new Headers();\r\n//     myHeaders.append('Content-Type', 'application/json');\r\n//     myHeaders.append('Authorization', token);\r\n\r\n//     try {\r\n//         await fetch(baseUrl+\"/task/userdone\", {\r\n//             method: \"GET\",\r\n//             headers: myHeaders\r\n//         })\r\n//             .then((response) => response.json())\r\n//             .then((data) => {\r\n//                 d = data;\r\n//             });\r\n//         return d;\r\n//     } catch (err) {\r\n//         return []\r\n//     }\r\n// }\r\n\r\n// export async function remove(id) {\r\n//     try {\r\n//         let token = localStorage.getItem('token');\r\n//         const myHeaders = new Headers();\r\n//         myHeaders.append('Content-Type', 'application/json');\r\n//         myHeaders.append('Authorization', token);\r\n//         let res = await fetch(baseUrl + \"/task/remove\", {\r\n//             method: \"POST\",\r\n//             headers: myHeaders,\r\n//             body: JSON.stringify({\r\n//                 _id: id,\r\n//             }),\r\n//         });\r\n//         console.log(res)\r\n//     } catch (err) {\r\n//         console.log(err);\r\n//     }\r\n// }\r\n\r\n\r\n// export async function done(id) {\r\n//     try {\r\n//         let token = localStorage.getItem('token');\r\n//         const myHeaders = new Headers();\r\n//         myHeaders.append('Content-Type', 'application/json');\r\n//         myHeaders.append('Authorization', token);\r\n//         let res = await fetch(baseUrl+\"/task/done\", {\r\n//             method: \"POST\",\r\n//             headers: myHeaders,\r\n//             body: JSON.stringify({\r\n//                 _id: id,\r\n//             }),\r\n//         });\r\n//         console.log(res)\r\n//     } catch (err) {\r\n//         console.log(err);\r\n//     }\r\n// }\r\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,eAAe,QAAQ,uBAAuB;AAEvD,OAAO,SAASC,WAAW,GAAG;EAAA;EAC1B,MAAMC,YAAY,GAAGF,eAAe,EAAE;EACtC,MAAMG,GAAG,GAAGJ,OAAO,GAAE,QAAQ;EAC7B,OAAM;IACFK;EACJ,CAAC;EACD,SAASA,MAAM,GAAG;IACd,OAAOF,YAAY,CAACG,GAAG,CAACF,GAAG,GAAG,MAAM,CAAC;EACzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,GA3FgBF,WAAW;EAAA,QACFD,eAAe;AAAA;AAAA,KADxBC,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}