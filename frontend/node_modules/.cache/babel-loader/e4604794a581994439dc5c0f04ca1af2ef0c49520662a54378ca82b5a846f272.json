{"ast":null,"code":"import { baseUrl } from './url';\nexport async function getAll() {\n  let d;\n  try {\n    await fetch(baseUrl + \"/task/all\", {\n      method: \"GET\"\n    }).then(response => response.json()).then(data => {\n      d = data;\n    });\n    return d;\n  } catch (err) {\n    return [];\n  }\n}\nexport async function getUserByJWT() {\n  let d;\n  let token = localStorage.getItem('token');\n  const myHeaders = new Headers();\n  myHeaders.append('Content-Type', 'application/json');\n  myHeaders.append('Authorization', token);\n  try {\n    await fetch(baseUrl + \"/task/user\", {\n      method: \"GET\",\n      headers: myHeaders\n    }).then(response => response.json()).then(data => {\n      d = data;\n    });\n    return d;\n  } catch (err) {\n    return [];\n  }\n}\nexport async function getUserDoneByJWT() {\n  let d;\n  let token = localStorage.getItem('token');\n  const myHeaders = new Headers();\n  myHeaders.append('Content-Type', 'application/json');\n  myHeaders.append('Authorization', token);\n  try {\n    await fetch(baseUrl + \"/task/userdone\", {\n      method: \"GET\",\n      headers: myHeaders\n    }).then(response => response.json()).then(data => {\n      d = data;\n    });\n    return d;\n  } catch (err) {\n    return [];\n  }\n}\nexport async function remove(id) {\n  try {\n    let token = localStorage.getItem('token');\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    myHeaders.append('Authorization', token);\n    let res = await fetch(baseUrl + \"/task/remove\", {\n      method: \"POST\",\n      headers: myHeaders,\n      body: JSON.stringify({\n        _id: id\n      })\n    });\n    console.log(res);\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport async function done(id) {\n  try {\n    let token = localStorage.getItem('token');\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    myHeaders.append('Authorization', token);\n    let res = await fetch(baseUrl + \"/task/done\", {\n      method: \"POST\",\n      headers: myHeaders,\n      body: JSON.stringify({\n        _id: id\n      })\n    });\n    console.log(res);\n  } catch (err) {\n    console.log(err);\n  }\n}","map":{"version":3,"names":["baseUrl","getAll","d","fetch","method","then","response","json","data","err","getUserByJWT","token","localStorage","getItem","myHeaders","Headers","append","headers","getUserDoneByJWT","remove","id","res","body","JSON","stringify","_id","console","log","done"],"sources":["C:/Users/razoi/Desktop/full-stack/React-Nodejs-MongoDb-Daytask/frontend/src/services/TaskService.js"],"sourcesContent":["import { baseUrl } from './url'\r\n\r\nexport async function getAll() {\r\n    let d;\r\n    try {\r\n        await fetch(baseUrl+\"/task/all\", {\r\n            method: \"GET\"\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                d = data;\r\n            });\r\n        return d;\r\n    } catch (err) {\r\n        return []\r\n    }\r\n}\r\n\r\nexport async function getUserByJWT() {\r\n    let d;\r\n    let token = localStorage.getItem('token');\r\n    const myHeaders = new Headers();\r\n    myHeaders.append('Content-Type', 'application/json');\r\n    myHeaders.append('Authorization', token);\r\n\r\n    try {\r\n        await fetch(baseUrl+\"/task/user\", {\r\n            method: \"GET\",\r\n            headers: myHeaders\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                d = data;\r\n            });\r\n        return d;\r\n    } catch (err) {\r\n        return []\r\n    }\r\n}\r\n\r\nexport async function getUserDoneByJWT() {\r\n    let d;\r\n    let token = localStorage.getItem('token');\r\n    const myHeaders = new Headers();\r\n    myHeaders.append('Content-Type', 'application/json');\r\n    myHeaders.append('Authorization', token);\r\n\r\n    try {\r\n        await fetch(baseUrl+\"/task/userdone\", {\r\n            method: \"GET\",\r\n            headers: myHeaders\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                d = data;\r\n            });\r\n        return d;\r\n    } catch (err) {\r\n        return []\r\n    }\r\n}\r\n\r\nexport async function remove(id) {\r\n    try {\r\n        let token = localStorage.getItem('token');\r\n        const myHeaders = new Headers();\r\n        myHeaders.append('Content-Type', 'application/json');\r\n        myHeaders.append('Authorization', token);\r\n        let res = await fetch(baseUrl + \"/task/remove\", {\r\n            method: \"POST\",\r\n            headers: myHeaders,\r\n            body: JSON.stringify({\r\n                _id: id,\r\n            }),\r\n        });\r\n        console.log(res)\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n\r\nexport async function done(id) {\r\n    try {\r\n        let token = localStorage.getItem('token');\r\n        const myHeaders = new Headers();\r\n        myHeaders.append('Content-Type', 'application/json');\r\n        myHeaders.append('Authorization', token);\r\n        let res = await fetch(baseUrl+\"/task/done\", {\r\n            method: \"POST\",\r\n            headers: myHeaders,\r\n            body: JSON.stringify({\r\n                _id: id,\r\n            }),\r\n        });\r\n        console.log(res)\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}