{"ast":null,"code":"export function useFetchWrapper() {\n  return {\n    get: request(\"GET\"),\n    post: request(\"POST\"),\n    put: request(\"PUT\"),\n    delete: request(\"DELETE\")\n  };\n  function request(method) {\n    let token = localStorage.getItem('token');\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    myHeaders.append('Authorization', token);\n    return async (url, body) => {\n      const requestOptions = {\n        method,\n        headers: myHeaders\n      };\n      if (body) {\n        requestOptions.headers[\"Content-Type\"] = \"application/json\";\n        requestOptions.body = JSON.stringify(body);\n      }\n      const response = await fetch(url, requestOptions);\n      return handleResponse(response);\n    };\n  }\n  function handleResponse(response) {\n    return response.text().then(text => {\n      const data = text && JSON.parse(text);\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n      return data;\n    });\n  }\n}","map":{"version":3,"names":["useFetchWrapper","get","request","post","put","delete","method","token","localStorage","getItem","myHeaders","Headers","append","url","body","requestOptions","headers","JSON","stringify","response","fetch","handleResponse","text","then","data","parse","ok","error","message","statusText","Promise","reject"],"sources":["C:/Users/razoi/Desktop/full-stack/React-Nodejs-MongoDb-Daytask/frontend/src/util/fetch-wrapper.js"],"sourcesContent":["export function useFetchWrapper() {\r\n    return {\r\n        get: request(\"GET\"),\r\n        post: request(\"POST\"),\r\n        put: request(\"PUT\"),\r\n        delete: request(\"DELETE\")\r\n    };\r\n    function request(method) {\r\n        let token = localStorage.getItem('token');\r\n        const myHeaders = new Headers();\r\n        myHeaders.append('Content-Type', 'application/json');\r\n        myHeaders.append('Authorization', token);\r\n        return async (url, body) => {\r\n\r\n            const requestOptions = {\r\n                method,\r\n                headers: myHeaders \r\n            };\r\n            if (body) {\r\n                requestOptions.headers[\"Content-Type\"] = \"application/json\";\r\n                requestOptions.body = JSON.stringify(body);\r\n            }\r\n            const response = await fetch(url, requestOptions);\r\n            return handleResponse(response);\r\n        };\r\n    }\r\n\r\n    function handleResponse(response) {\r\n        return response.text().then((text) => {\r\n            const data = text && JSON.parse(text);\r\n            if (!response.ok) {\r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n            return data;\r\n        });\r\n    }\r\n}"],"mappings":"AAAA,OAAO,SAASA,eAAe,GAAG;EAC9B,OAAO;IACHC,GAAG,EAAEC,OAAO,CAAC,KAAK,CAAC;IACnBC,IAAI,EAAED,OAAO,CAAC,MAAM,CAAC;IACrBE,GAAG,EAAEF,OAAO,CAAC,KAAK,CAAC;IACnBG,MAAM,EAAEH,OAAO,CAAC,QAAQ;EAC5B,CAAC;EACD,SAASA,OAAO,CAACI,MAAM,EAAE;IACrB,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,MAAMC,SAAS,GAAG,IAAIC,OAAO,EAAE;IAC/BD,SAAS,CAACE,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACpDF,SAAS,CAACE,MAAM,CAAC,eAAe,EAAEL,KAAK,CAAC;IACxC,OAAO,OAAOM,GAAG,EAAEC,IAAI,KAAK;MAExB,MAAMC,cAAc,GAAG;QACnBT,MAAM;QACNU,OAAO,EAAEN;MACb,CAAC;MACD,IAAII,IAAI,EAAE;QACNC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;QAC3DD,cAAc,CAACD,IAAI,GAAGG,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;MAC9C;MACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAEE,cAAc,CAAC;MACjD,OAAOM,cAAc,CAACF,QAAQ,CAAC;IACnC,CAAC;EACL;EAEA,SAASE,cAAc,CAACF,QAAQ,EAAE;IAC9B,OAAOA,QAAQ,CAACG,IAAI,EAAE,CAACC,IAAI,CAAED,IAAI,IAAK;MAClC,MAAME,IAAI,GAAGF,IAAI,IAAIL,IAAI,CAACQ,KAAK,CAACH,IAAI,CAAC;MACrC,IAAI,CAACH,QAAQ,CAACO,EAAE,EAAE;QACd,MAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAO,IAAKT,QAAQ,CAACU,UAAU;QAC3D,OAAOC,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;MAChC;MACA,OAAOH,IAAI;IACf,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}